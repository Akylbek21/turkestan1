<script>
// js/i18n.js ‚Äî KK / EN –ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Å localStorage
(function () {
  const LS_KEY = 'lang';
  const SUPPORTED = ['kk','en'];
  const DEFAULT_LANG = 'en'; // —Å–∞–π—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º

  // ==== –û—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π (value –≤ <option> –æ—Å—Ç–∞—é—Ç—Å—è RU!) ====
  const MAP_CATS = {
    kk: {
      '–ú–∞–≤–∑–æ–ª–µ–π':'–ö–µ—Å–µ–Ω–µ','–ú–µ—á–µ—Ç—å':'–ú–µ—à—ñ—Ç','–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—è':'–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—è','–ú—É–∑–µ–π':'–ú“±—Ä–∞–∂–∞–π',
      '–ö—É–ª—å—Ç—É—Ä–∞':'–ú”ô–¥–µ–Ω–∏–µ—Ç','–°—Ü–µ–Ω–∞':'–°–∞—Ö–Ω–∞','–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è':'–û–π—ã–Ω-—Å–∞—É—ã“õ','–ü–∞—Ä–∫':'–°–∞—è–±–∞“õ',
      '–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω':'–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω','–ü—Ä–∏—Ä–æ–¥–∞':'–¢–∞–±–∏“ì–∞—Ç','–ü–µ—â–µ—Ä–∞':'“Æ“£–≥—ñ—Ä','–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞':'–ò–Ω—Ñ—Ä–∞“õ“±—Ä—ã–ª—ã–º'
    },
    en: {
      '–ú–∞–≤–∑–æ–ª–µ–π':'Mausoleum','–ú–µ—á–µ—Ç—å':'Mosque','–ê—Ä—Ö–µ–æ–ª–æ–≥–∏—è':'Archaeology','–ú—É–∑–µ–π':'Museum',
      '–ö—É–ª—å—Ç—É—Ä–∞':'Culture','–°—Ü–µ–Ω–∞':'Stage','–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è':'Attractions','–ü–∞—Ä–∫':'Park',
      '–ê—Ç—Ç—Ä–∞–∫—Ü–∏–æ–Ω':'Ride','–ü—Ä–∏—Ä–æ–¥–∞':'Nature','–ü–µ—â–µ—Ä–∞':'Cave','–ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞':'Infrastructure'
    }
  };

  // ==== –°–ª–æ–≤–∞—Ä—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ ====
  const DICT = {
    kk: {
      app:{ title:'–¢“Ø—Ä–∫—ñ—Å—Ç–∞–Ω –æ–±–ª—ã—Å—ã–Ω—ã“£ –∫”©—Ä—ñ–∫—Ç—ñ –∂–µ—Ä–ª–µ—Ä—ñ',
            hero:'–¢“Ø—Ä–∫—ñ—Å—Ç–∞–Ω –æ–±–ª—ã—Å—ã–Ω –∞—à—ã“£—ã–∑',
            count:n=>`${n} –Ω—ã—Å–∞–Ω`, cats:n=>`${n} —Å–∞–Ω–∞—Ç` },
      nav:{ guide:'–ù“±—Å“õ–∞—É–ª—ã“õ', passport:'–°–∞—è—Ö–∞—Ç—à—ã –ø–∞—Å–ø–æ—Ä—Ç—ã' },
      search:{ placeholder:'–Ü–∑–¥–µ—É: –Ø—Å—Å–∞—É–∏, –û—Ç—ã—Ä–∞—Ä, –°–∞—É—Ä–∞–Ω‚Ä¶' },
      filter:{ category:'–°–∞–Ω–∞—Ç', all:'–ë–∞—Ä–ª—ã“õ —Å–∞–Ω–∞—Ç—Ç–∞—Ä' },
      visited:{ label:'–ë–∞—Ä“ì–∞–Ω–¥–∞—Ä:' },
      place:{
        facts:'“ö—ã–∑—ã“õ—Ç—ã –¥–µ—Ä–µ–∫—Ç–µ—Ä', quiz:'–ë—ñ–ª—ñ–º—ñ“£–¥—ñ —Ç–µ–∫—Å–µ—Ä', check:'–¢–µ–∫—Å–µ—Ä—É',
        reconTitle:'”®—Ç–∫–µ–Ω / –±“Ø–≥—ñ–Ω', reconHint:'–ñ“Ø–≥—ñ—Ä—Ç–∫—ñ–Ω—ñ –∂—ã–ª–∂—ã—Ç—ã“£—ã–∑',
        mark:'–ë–∞—Ä–¥—ã–º', map:'Google –∫–∞—Ä—Ç–∞—Å—ã–Ω–¥–∞ –∞—à—É', share:'–ë”©–ª—ñ—Å—É',
        pick:'–ù“±—Å“õ–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑', right:'–î“±—Ä—ã—Å! üéâ', wrong:'–î“±—Ä—ã—Å –µ–º–µ—Å. “ö–∞–π—Ç–∞–ª–∞–ø –∫”©—Ä—ñ“£—ñ–∑.'
      },
      footer:{ copy:'Turkestan Guide ‚Äî –∫”©–ø–±–µ—Ç—Ç—ñ –Ω“±—Å“õ–∞', tech:'HTML ‚Ä¢ CSS ‚Ä¢ JS' },
      toast:{ copied:'–°—ñ–ª—Ç–µ–º–µ –∫”©—à—ñ—Ä—ñ–ª–¥—ñ!' },
      guide:{ title:'–¢“Ø—Ä–∫—ñ—Å—Ç–∞–Ω“ì–∞ –≥–∏–¥ ‚Äî –Ω–µ –∫”©—Ä—É–≥–µ –±–æ–ª–∞–¥—ã', back:'‚Üê –ë–∞—Å—Ç—ã –±–µ—Ç–∫–µ', print:'–ë–∞—Å—ã–ø —à—ã“ì–∞—Ä—É / PDF',
              note:'–ú–∞—Ç–µ—Ä–∏–∞–ª –º–µ–∫—Ç–µ–ø –∂–æ–±–∞—Å—ã “Ø—à—ñ–Ω –¥–∞–π—ã–Ω–¥–∞–ª–¥—ã. –°—É—Ä–µ—Ç—Ç–µ—Ä –±–µ—Ä—ñ–ª–≥–µ–Ω —Å–∞–π—ã–Ω –∂–∞“£–∞—Ä—Ç—ã–ª–∞–¥—ã.' }
    },
    en: {
      app:{ title:'Turkestan Region ‚Äî Places to See',
            hero:'Discover Turkestan Region',
            count:n=>`${n} places`, cats:n=>`${n} categories` },
      nav:{ guide:'Guide', passport:'Passport' },
      search:{ placeholder:'Search: Yasawi, Otrar, Sauran‚Ä¶' },
      filter:{ category:'Category', all:'All categories' },
      visited:{ label:'Visited:' },
      place:{
        facts:'Interesting facts', quiz:'Check your knowledge', check:'Check',
        reconTitle:'Past / Today', reconHint:'Drag the slider',
        mark:'I was here', map:'Open in Google Maps', share:'Share',
        pick:'Choose an option', right:'Correct! üéâ', wrong:'Not quite. Try again.'
      },
      footer:{ copy:'Turkestan Guide ‚Äî multi-page edition', tech:'HTML ‚Ä¢ CSS ‚Ä¢ JS' },
      toast:{ copied:'Link copied!' },
      guide:{ title:'Turkestan Guide ‚Äî what to see', back:'‚Üê Home', print:'Print / PDF',
              note:'This material was prepared for a school project. Images will be updated as available.' }
    }
  };

  // ==== TOC (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –≤ guide.html —á–µ—Ä–µ–∑ data-i18n) ====
  const GUIDE_TOC = {
    kk:{
      toc_overview:'–¢“Ø—Ä–∫—ñ—Å—Ç–∞–Ω–¥–∞ –Ω–µ –∫”©—Ä—É–≥–µ –±–æ–ª–∞–¥—ã',
      toc_azret:'¬´”ò–∑—ñ—Ä–µ—Ç –°“±–ª—Ç–∞–Ω¬ª –º—É–∑–µ–π-“õ–æ—Ä—ã“ì—ã',
      toc_yassawi:'“ö–æ–∂–∞ –ê—Ö–º–µ—Ç –Ø—Å–∞—É–∏ –∫–µ—Å–µ–Ω–µ—Å—ñ',
      toc_rabia:'–†–∞–±–∏“ì–∞ –°“±–ª—Ç–∞–Ω –ë–µ–≥—ñ–º –∫–µ—Å–µ–Ω–µ—Å—ñ',
      toc_khilvet:'–ñ–µ—Ä–∞—Å—Ç—ã –º–µ—à—ñ—Ç—ñ –•–∏–ª—É–∞—Ç',
      toc_esim:'–ï—Å—ñ–º —Ö–∞–Ω –∫–µ—Å–µ–Ω–µ—Å—ñ',
      toc_ethno:'–≠—Ç–Ω–æ–∞—É—ã–ª',
      toc_juma:'–ñ“±–º–∞ –º–µ—à—ñ—Ç—ñ',
      toc_regmuseum:'–û–±–ª—ã—Å—Ç—ã“õ —Ç–∞—Ä–∏—Ö–∏-”©–ª–∫–µ—Ç–∞–Ω—É –º—É–∑–µ–π—ñ',
      toc_keruen:'–ö–µ—Ä—É–µ–Ω –°–∞—Ä–∞–π',
      toc_kultobe:'–ö“Ø–ª—Ç”©–±–µ “õ–∞–ª–∞—à—ã“ì—ã',
      toc_yassawi_museum:'“ö–æ–∂–∞ –ê—Ö–º–µ—Ç –Ø—Å–∞—É–∏ –º—É–∑–µ–π—ñ',
      toc_station:'–¢–µ–º—ñ—Ä–∂–æ–ª –≤–æ–∫–∑–∞–ª—ã',
      toc_amphi:'–ê–º—Ñ–∏—Ç–µ–∞—Ç—Ä',
      toc_theatre:'“ö–∞–∑–∞“õ –º—É–∑—ã–∫–∞–ª—ã“õ-–¥—Ä–∞–º–∞ —Ç–µ–∞—Ç—Ä—ã',
      toc_park:'J—ñbek Joly –æ–π—ã–Ω-—Å–∞—É—ã“õ –ø–∞—Ä–∫—ñ',
      toc_flying:'“∞—à–∞—Ç—ã–Ω —Ç–µ–∞—Ç—Ä',
      toc_firstpark:'–¢“±“£“ì—ã—à –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç —Å–∞—è–±–∞“ì—ã',
      toc_near:'–¢“Ø—Ä–∫—ñ—Å—Ç–∞–Ω –º–∞“£—ã–Ω–¥–∞ –Ω–µ –∫”©—Ä—É–≥–µ –±–æ–ª–∞–¥—ã',
      toc_gauhar:'¬´–ì–∞—É“ª–∞—Ä –ê–Ω–∞¬ª –∫–µ—Å–µ–Ω–µ—Å—ñ',
      toc_ukasha:'“∞“õ–∞—à–∞ –ê—Ç–∞',
      toc_arystan:'–ê—Ä—ã—Å—Ç–∞–Ω-–ë–∞–± –∫–µ—Å–µ–Ω–µ—Å—ñ',
      toc_karatau:'“ö–∞—Ä–∞—Ç–∞—É “õ–æ—Ä—ã“ì—ã',
      toc_akmeshit:'–ê“õ–º–µ—à—ñ—Ç “Ø“£–≥—ñ—Ä—ñ'
    },
    en:{
      toc_overview:'Highlights in Turkestan',
      toc_azret:'Azret Sultan Reserve-Museum',
      toc_yassawi:'Mausoleum of Khoja Ahmed Yasawi',
      toc_rabia:'Mausoleum of Rabia Sultan Begim',
      toc_khilvet:'Underground Mosque Khilvet',
      toc_esim:'Mausoleum of Esim Khan',
      toc_ethno:'Ethno-village',
      toc_juma:'Juma Mosque',
      toc_regmuseum:'Regional History Museum',
      toc_keruen:'Keruen Sarai',
      toc_kultobe:'Kultobe Settlement',
      toc_yassawi_museum:'Khoja Ahmed Yasawi Museum',
      toc_station:'Railway Station Building',
      toc_amphi:'Amphitheatre',
      toc_theatre:'Kazakh Music & Drama Theatre',
      toc_park:'J—ñbek Joly Amusement Park',
      toc_flying:'Flying Theatre',
      toc_firstpark:'First President Park',
      toc_near:'Day trips near Turkestan',
      toc_gauhar:'Gauhar Ana Mausoleum',
      toc_ukasha:'Ukasha Ata',
      toc_arystan:'Arystan Bab Mausoleum',
      toc_karatau:'Karatau Nature Reserve',
      toc_akmeshit:'Akmeshit Cave'
    }
  };
  // –ø—Ä–∏—à–∏–≤–∞–µ–º TOC
  for (const l of SUPPORTED){ DICT[l].guide_toc = GUIDE_TOC[l]; }

  // ==== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ ====
  const clampLang = (l)=> SUPPORTED.includes(l) ? l : DEFAULT_LANG;
  const getLangFromQS = ()=>{
    try{ const m = location.search.match(/[?&]lang=(kk|en)\b/i); return m ? m[1].toLowerCase() : null; }
    catch{ return null; }
  };

  const I18N = {
    lang: clampLang(getLangFromQS() || localStorage.getItem(LS_KEY) || document.documentElement.lang || DEFAULT_LANG),
    _cbs:[],

    set(l){
      this.lang = clampLang(l);
      localStorage.setItem(LS_KEY, this.lang);
      this.applyAll();
      this._cbs.forEach(fn => { try{ fn(this.lang); }catch{} });
    },
    get(){ return this.lang; },
    onChange(fn){ this._cbs.push(fn); },

    t(path){
      const d = DICT[this.lang] || DICT[DEFAULT_LANG];
      const v = path.split('.').reduce((o,k)=> (o && o[k] != null) ? o[k] : null, d);
      return (v == null) ? path : v;
    },

    // ===== –≥–ª–∞–≤–Ω–∞—è =====
    updateIndexUI(){
      const d = DICT[this.lang] || DICT[DEFAULT_LANG];

      const h1 = document.querySelector('header h1#title-main, header h1');
      if (h1) h1.textContent = d.app.title;

      // –Ω–∞–≤–∏–≥–∞—Ü–∏—è
      const navGuide = document.getElementById('nav-guide');
      const navPassport = document.getElementById('nav-passport');
      if (navGuide) navGuide.textContent = d.nav.guide;
      if (navPassport) navPassport.textContent = d.nav.passport;

      // –ø–æ–∏—Å–∫
      const q = document.getElementById('q');
      if (q) q.placeholder = d.search.placeholder;

      // —Å–µ–ª–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ–¥–ø–∏—Å–∏ ‚Äî –ø–æ —Ç–µ–∫—É—â–µ–º—É —è–∑—ã–∫—É, –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî RU)
      const cat = document.getElementById('cat');
      if (cat) cat.setAttribute('aria-label', this.t('filter.category'));
      const mapCat = MAP_CATS[this.lang];
      if (cat){
        [...cat.options].forEach(opt=>{
          if (!opt.value) opt.textContent = this.t('filter.all');
          else            opt.textContent = mapCat[opt.value] || opt.value;
        });
      }

      // –±–µ–π–¥–∂ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–µ—Å—Ç (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
      const cb = document.getElementById('count-badge');
      if (cb){
        const m = cb.textContent.match(/\d+/); const n = m ? +m[0] : 0;
        cb.textContent = d.app.count(n);
        const chipAll = document.getElementById('chip-all'); if (chipAll) chipAll.textContent = d.app.count(n);
      }

      // —á–∏–ø —Å —á–∏—Å–ª–æ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–µ—Å–ª–∏ –µ—Å—Ç—å)
      const chipCats = document.getElementById('chip-cats');
      if (chipCats && window.PPL_UNIQUE_CATS){
        chipCats.textContent = d.app.cats(window.PPL_UNIQUE_CATS);
      }

      const heroT = document.getElementById('hero-title'); if (heroT) heroT.textContent = d.app.hero;

      // –±–µ–π–¥–∂ ¬´Visited¬ª
      const vb = document.getElementById('visited-badge');
      if (vb){
        const count = (vb.textContent.match(/\d+/) || [0])[0];
        vb.textContent = `${this.t('visited.label')} ${count}`;
      }

      // —Ç–µ–≥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
      document.querySelectorAll('.grid .card .loc .tag').forEach(tag=>{
        const base = tag.dataset.ru || tag.textContent; // –±–∞–∑–æ–≤–æ–µ (RU) –∑–Ω–∞—á–µ–Ω–∏–µ –≤ data-ru
        tag.dataset.ru = base;
        tag.textContent = (MAP_CATS[this.lang][base] || base);
      });

      // —Ñ—É—Ç–µ—Ä
      const footTech = document.querySelector('footer .container div:last-child');
      const copy = document.querySelector('footer .container div:first-child');
      footTech && (footTech.textContent = d.footer.tech);
      if (copy){
        const tail = copy.childNodes[copy.childNodes.length-1];
        if (tail && tail.nodeType === 3){ tail.nodeValue = ' ' + d.footer.copy; }
      }

      // –∞–∫—Ç–∏–≤–Ω—ã–π —è–∑—ã–∫
      document.querySelectorAll('a[data-lang]').forEach(a=>{
        a.classList.toggle('active', a.getAttribute('data-lang') === this.lang);
      });

      document.documentElement.setAttribute('lang', this.lang);
    },

    // ===== place-—Å—Ç—Ä–∞–Ω–∏—Ü—ã =====
    updatePlaceUI(){
      const d = DICT[this.lang] || DICT[DEFAULT_LANG];

      const factsH = document.querySelector('.section h3');
      if (factsH) factsH.textContent = d.place.facts;

      const quizH = document.querySelector('.section.quiz h3');
      if (quizH) quizH.textContent = d.place.quiz;

      const checkBtn = document.getElementById('check'); if (checkBtn) checkBtn.textContent = d.place.check;

      const reconTitle = document.querySelector('.recon-head h3');
      const reconHint  = document.querySelector('.recon-head .muted');
      reconTitle && (reconTitle.textContent = d.place.reconTitle);
      reconHint  && (reconHint.textContent  = d.place.reconHint);

      const mark = document.getElementById('mark');
      const map  = document.getElementById('map');
      const share= document.getElementById('share');
      mark  && (mark.textContent  = d.place.mark);
      map   && (map.textContent   = d.place.map);
      share && (share.textContent = d.place.share);

      document.querySelectorAll('.tag').forEach(tag=>{
        const base = tag.dataset.ru || tag.textContent;
        tag.dataset.ru = base;
        tag.textContent = (MAP_CATS[this.lang][base] || base);
      });

      const copy = document.querySelector('footer .container');
      if (copy){
        const tail = copy.lastChild;
        if (tail && tail.nodeType === 3){ tail.nodeValue = ' ' + d.footer.copy; }
      }

      document.querySelectorAll('a[data-lang]').forEach(a=>{
        a.classList.toggle('active', a.getAttribute('data-lang') === this.lang);
      });

      document.documentElement.setAttribute('lang', this.lang);
    },

    // ===== guide.html =====
    updateGuideUI(){
      const d = DICT[this.lang] || DICT[DEFAULT_LANG];

      const gTitle = document.getElementById('g-title'); if (gTitle) gTitle.textContent = d.guide.title;
      const gBack  = document.getElementById('g-back');  if (gBack)  gBack.textContent  = d.guide.back;
      const gPrint = document.getElementById('g-print'); if (gPrint) gPrint.textContent = d.guide.print;
      const gNote  = document.getElementById('g-note');  if (gNote)  gNote.textContent  = d.guide.note;

      document.querySelectorAll('#toc [data-i18n]').forEach(a=>{
        const key = a.getAttribute('data-i18n'); const path = `guide_toc.${key}`;
        const text = this.t(path); if (text !== path) a.textContent = text;
      });

      document.querySelectorAll('a[data-lang]').forEach(a=>{
        a.classList.toggle('active', a.getAttribute('data-lang') === this.lang);
      });

      document.documentElement.setAttribute('lang', this.lang);
    },

    // ==== –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ ====
    init(){
      document.querySelectorAll('[data-lang]').forEach(btn=>{
        btn.addEventListener('click', (e)=>{
          e.preventDefault();
          const code = btn.getAttribute('data-lang');
          this.set(code);
        });
      });
      document.querySelectorAll('[data-lang]').forEach(b=>{
        b.classList.toggle('active', b.getAttribute('data-lang') === this.lang);
      });
      document.documentElement.setAttribute('lang', this.lang);
    },

    applyAll(){
      this.updateIndexUI();
      this.updatePlaceUI();
      this.updateGuideUI();
    }
  };

  // –≠–∫—Å–ø–æ—Ä—Ç
  window.I18N = I18N;
  window.I18N_MAP_CATS = MAP_CATS;

  // –ê–≤—Ç–æ-–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  document.addEventListener('DOMContentLoaded', function () {
    if (!localStorage.getItem(LS_KEY)) localStorage.setItem(LS_KEY, DEFAULT_LANG);
    I18N.init();
    I18N.applyAll();
  });
})();
</script>
